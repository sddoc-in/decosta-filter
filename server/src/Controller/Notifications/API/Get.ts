import { Request, Response } from "express";
import UserAccess from "../../../Base/Class/UserAccess";
import Notifications from "../../../Base/Class/Notifications";
import Collections from "../../../config/collections";
import ResStatus from "../../../config/response/ResStatus";
import ResponseClass from "../../../Base/Class/Response";
import CommonMessage from "../../../config/response/CommonMessage";


class Get {

    /**
     * Constructor
     */
    constructor() {
        this.getOne = this.getOne.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getAllGeneratedBy = this.getAllGeneratedBy.bind(this);
        this.getAllGeneratedFor = this.getAllGeneratedFor.bind(this);
        this.getAllToShow = this.getAllToShow.bind(this)
    }

    /**
     * Get One Notification
     * @param req 
     * @param res 
     */
    async getOne(req: Request, res: Response) {
        try {
            new UserAccess({ Id: req.query.Id as string, Session: req.query.Session as string, Token: req.query.Token as string }).validate();

            let notifications = new Notifications();
            notifications.paramRecId(parseInt(req.query.notifications as string));
            await notifications.connectDb();
            let response = new ResponseClass(ResStatus.Success, CommonMessage.DataFound);
            response.setData(await notifications.getOne(Collections.NotificationDetails, { RecId: notifications.paramRecId() }));
            notifications.flush();

            return res.status(ResStatus.Success).send(response.getResponse());
        } catch (error) {
            if (error instanceof ResponseClass) {
                return res.status(error.getStatus()).send(error.getResponse());
            }
            return res.status(ResStatus.InternalServerError)
                .send(
                    new ResponseClass(
                        ResStatus.InternalServerError,
                        CommonMessage.InternalServerError
                    ).getResponse()
                );
        }
    }

    /**
     * Get All Notifications
     * @param req 
     * @param res 
     */
    async getAll(req: Request, res: Response) {
        try {
            new UserAccess({ Id: req.query.Id as string, Session: req.query.Session as string, Token: req.query.Token as string }).validate();

            let notifications = new Notifications();
            await notifications.connectDb();
            let response = new ResponseClass(ResStatus.Success, CommonMessage.DataFound);
            response.setData(await notifications.getAll(Collections.NotificationDetails, {}));
            notifications.flush();

            return res.status(ResStatus.Success).send(response.getResponse());
        } catch (error) {
            if (error instanceof ResponseClass) {
                return res.status(error.getStatus()).send(error.getResponse());
            }
            return res.status(ResStatus.InternalServerError)
                .send(
                    new ResponseClass(
                        ResStatus.InternalServerError,
                        CommonMessage.InternalServerError
                    ).getResponse()
                );
        }
    }

    /**
     * Get All Notifications Generated By
     * @param req 
     * @param res 
     */
    async getAllGeneratedBy(req: Request, res: Response) {
        try {
            new UserAccess({ Id: req.query.Id as string, Session: req.query.Session as string, Token: req.query.Token as string }).validate();

            let notifications = new Notifications();
            notifications.paramGeneratedBy(req.query.notifications as string);
            await notifications.connectDb();
            let response = new ResponseClass(ResStatus.Success, CommonMessage.DataFound);
            response.setData(await notifications.getAll(Collections.NotificationDetails, { GeneratedByRecId: notifications.paramGeneratedBy() }));
            notifications.flush();

            return res.status(ResStatus.Success).send(response.getResponse());
        } catch (error) {
            if (error instanceof ResponseClass) {
                return res.status(error.getStatus()).send(error.getResponse());
            }
            return res.status(ResStatus.InternalServerError)
                .send(
                    new ResponseClass(
                        ResStatus.InternalServerError,
                        CommonMessage.InternalServerError
                    ).getResponse()
                );
        }
    }

    /**
     * Get All Notifications Generated For
     * @param req 
     * @param res 
     */
    async getAllGeneratedFor(req: Request, res: Response) {
        try {
            new UserAccess({ Id: req.query.Id as string, Session: req.query.Session as string, Token: req.query.Token as string }).validate();

            let notifications = new Notifications();
            await notifications.connectDb();
            let response = new ResponseClass(ResStatus.Success, CommonMessage.DataFound);
            response.setData(await notifications.getAll(Collections.NotificationDetails, { GeneratedForUserId:req }));
            notifications.flush();

            return res.status(ResStatus.Success).send(response.getResponse());
        } catch (error) {
            if (error instanceof ResponseClass) {
                return res.status(error.getStatus()).send(error.getResponse());
            }
            return res.status(ResStatus.InternalServerError)
                .send(
                    new ResponseClass(
                        ResStatus.InternalServerError,
                        CommonMessage.InternalServerError
                    ).getResponse()
                );
        }
    }

    /**
     * Get All Notifications To Show
     * @param req 
     * @param res 
     */
    async getAllToShow(req: Request, res: Response) {
        try {
            new UserAccess({ Id: req.query.Id as string, Session: req.query.Session as string, Token: req.query.Token as string }).validate();

            let notifications = new Notifications();
            await notifications.connectDb();
            let response = new ResponseClass(ResStatus.Success, CommonMessage.DataFound);
            response.setData(await notifications.getAll(Collections.NotificationDetails, { Show: 0,GeneratedForUserId: req.query.Id as string},"AND"));
            notifications.flush();

            return res.status(ResStatus.Success).send(response.getResponse());
        } catch (error) {
            if (error instanceof ResponseClass) {
                return res.status(error.getStatus()).send(error.getResponse());
            }
            return res.status(ResStatus.InternalServerError)
                .send(
                    new ResponseClass(
                        ResStatus.InternalServerError,
                        CommonMessage.InternalServerError
                    ).getResponse()
                );
        }
    }
}

export default Get;