name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install pnpm
        run: |
          npm install -g pnpm
          pnpm --version

      - name: Install dependencies and build client
        run: |
          cd $GITHUB_WORKSPACE/client
          pnpm install --no-frozen-lockfile
          CI=false pnpm run build  # Ignore ESLint warnings

      - name: Install dependencies and build server
        run: |
          cd $GITHUB_WORKSPACE/server
          pnpm install --no-frozen-lockfile
          CI=false pnpm run build  # Ignore ESLint warnings

      - name: Archive production artifact
        uses: actions/upload-artifact@v3
        with:
          name: production-artifact
          path: |
            client/build
            server/build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download production artifact
        uses: actions/download-artifact@v3
        with:
          name: production-artifact
          path: ./artifact

      - name: Connect to server and setup directories
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /var/www/
            mkdir -p client server

      - name: Deploy to Linux machine
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ./artifact/
          target: /var/www/

      - name: Finalize Deployment
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            # Ensure pnpm and pm2 are installed
            npm install -g pnpm pm2

            # Debugging step to check files
            cd /var/www/client
            ls -al
            pnpm install
            cd ../server
            ls -al
            pnpm install

            # Restart the application using pm2
            pm2 delete 0 || true
            pm2 start pnpm --name decosta -- start
